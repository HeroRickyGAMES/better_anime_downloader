import 'dart:async';
import 'package:puppeteer/puppeteer.dart';
import 'package:http/http.dart' as http; // Para fazer requisi√ß√µes HTTP
import 'dart:convert'; // Para utf8.decode

Future<void> delay(int ms) => Future.delayed(Duration(milliseconds: ms));

// Fun√ß√£o auxiliar para resolver URLs relativas
Uri _resolveUri(Uri baseUrl, String relativeUrl) {
  if (Uri.tryParse(relativeUrl)?.isAbsolute ?? false) {
    return Uri.parse(relativeUrl);
  }
  return baseUrl.resolve(relativeUrl);
}

Future<Map<String, String>> capturarM3u8(String urlInicial) async {
  var browser = await puppeteer.launch(headless: false);
  var page = await browser.newPage();

  String currentUrl = urlInicial;
  String? m3u8Url; // Ir√° armazenar a URL do M3U8 detectada

  final adBlockList = [
    'doubleclick.net',
    'googlesyndication.com',
    'adservice.google.com',
    'ads.pubmatic.com',
    'pagead2.googlesyndication.com',
  ];

  await page.setRequestInterception(true);
  page.onRequest.listen((request) {
    if (adBlockList.any((ad) => request.url.contains(ad))) {
      request.abort();
    } else {
      request.continueRequest();
    }
  });

  page.onFrameNavigated.listen((frame) async {
    if (frame == page.mainFrame) {
      final newUrl = frame.url;
      print('üîÑ URL mudou para: $newUrl');
      if (newUrl == 'https://betteranime.net/' && currentUrl != newUrl) {
        print('‚ö†Ô∏è Redirecionado para a home! Tentando voltar para: $currentUrl');
        try {
          await page.goto(currentUrl, wait: Until.networkIdle);
          print('üîô Voltou para: $currentUrl');
        } catch (e) {
          print('‚ùå Erro ao voltar para ($currentUrl): $e');
        }
      } else {
        currentUrl = newUrl;
      }
    }
  });

  page.onResponse.listen((response) {
    final respUrl = response.url;
    if (respUrl.contains('.m3u8')) { // Usar 'contains' pode ser mais flex√≠vel que 'endsWith'
      m3u8Url = respUrl;
      print('üéØ M3U8 detectado/atualizado para: $m3u8Url');
    }
  });

  print('‚û°Ô∏è Abrindo URL inicial: $urlInicial');
  await page.goto(urlInicial, wait: Until.networkIdle);
  print('‚úÖ P√°gina carregada: ${page.url}');

  // --- C√ìDIGO PARA SELECIONAR 1080p ---
  try {
    print('üîé Procurando pelo bot√£o 1080p...');
    final String xpath1080p =
        "//*[(self::button or self::div or self::a or self::span) and normalize-space(.)='1080p']";
    await page.waitForXPath(xpath1080p, timeout: Duration(seconds: 15));
    List<ElementHandle> elements = await page.$x(xpath1080p);

    if (elements.isNotEmpty) {
      await elements.first.click();
      print('üñ±Ô∏è Bot√£o 1080p clicado.');
      print('üóëÔ∏è Limpando URL M3U8 anterior (se houver).');
      m3u8Url = null; // Limpa para pegar o M3U8 espec√≠fico do 1080p

      print('‚è≥ Aguardando um tempo para o(s) M3U8(s) da qualidade 1080p serem carregados...');
      // Espera um tempo fixo para permitir que o navegador solicite todos os M3U8s necess√°rios
      // (master, depois media). O onResponse ir√° atualizar m3u8Url para o √∫ltimo.
      await delay(15000); // Espera 15 segundos. Ajuste se necess√°rio.
      print('‚åõ Tempo de espera inicial para M3U8s conclu√≠do.');

    } else {
      print('‚ö†Ô∏è Bot√£o 1080p n√£o encontrado.');
      // Se o bot√£o n√£o for encontrado, ainda esperamos um pouco por qualquer M3U8 que possa carregar.
      print('‚è≥ Aguardando por M3U8s (bot√£o 1080p n√£o encontrado)...');
      await delay(10000);
    }
  } catch (e) {
    print('‚ùå Erro ao tentar selecionar 1080p: $e');
    // Mesmo com erro, esperamos um pouco por M3U8s.
    print('‚è≥ Aguardando por M3U8s (ap√≥s erro na sele√ß√£o de 1080p)...');
    await delay(10000);
  }
  // --- FIM DO C√ìDIGO PARA SELECIONAR 1080p ---

  String? finalPlayableM3u8Url = m3u8Url;

  if (m3u8Url == null) {
    print('‚ö†Ô∏è Nenhum M3U8 foi detectado ap√≥s o per√≠odo de espera principal.');
  } else {
    print('‚ÑπÔ∏è M3U8 final detectado pelo Puppeteer (antes do parsing): $m3u8Url');
    try {
      print('üîé Verificando se o M3U8 capturado ($m3u8Url) √© um Master Playlist...');
      var response = await http.get(Uri.parse(m3u8Url!)); // Usar m3u8Url! pois verificamos se √© null
      if (response.statusCode == 200) {
        String m3u8Content = utf8.decode(response.bodyBytes);

        if (m3u8Content.contains('#EXT-X-STREAM-INF')) {
          print('‚úÖ √â um Master Playlist. Procurando pelo Media Playlist 1080p...');
          final lines = m3u8Content.split('\n');
          String? mediaPlaylistRelativeUrl;
          int bestBandwidthFor1080p = 0; // Para o caso de m√∫ltiplas op√ß√µes 1080p

          for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            if (line.startsWith('#EXT-X-STREAM-INF')) {
              bool is1080pStream = line.contains('RESOLUTION=1920x1080');

              if (is1080pStream && (i + 1 < lines.length)) {
                String nextLine = lines[i+1].trim();
                if (nextLine.isNotEmpty && !nextLine.startsWith('#')) {
                  // Se houver m√∫ltiplas streams 1080p, podemos pegar a de maior BANDWIDTH
                  RegExp bandwidthRegex = RegExp(r'BANDWIDTH=(\d+)');
                  Match? bandwidthMatch = bandwidthRegex.firstMatch(line);
                  int currentBandwidth = bandwidthMatch != null ? int.parse(bandwidthMatch.group(1)!) : 0;

                  if (currentBandwidth > bestBandwidthFor1080p) {
                    bestBandwidthFor1080p = currentBandwidth;
                    mediaPlaylistRelativeUrl = nextLine;
                    print('üéûÔ∏è Encontrado Media Playlist 1080p (relativo) com BANDWIDTH $currentBandwidth: $mediaPlaylistRelativeUrl');
                  }
                }
              }
            }
          }

          // Se n√£o encontrou 1080p expl√≠cito, mas h√° apenas um stream, pega ele
          if (mediaPlaylistRelativeUrl == null && lines.where((l) => l.startsWith('#EXT-X-STREAM-INF')).length == 1) {
            for (var i = 0; i < lines.length; i++) {
              var line = lines[i].trim();
              if (line.startsWith('#EXT-X-STREAM-INF') && (i + 1 < lines.length)) {
                String nextLine = lines[i+1].trim();
                if (nextLine.isNotEmpty && !nextLine.startsWith('#')) {
                  mediaPlaylistRelativeUrl = nextLine;
                  print('‚ö†Ô∏è N√£o encontrou 1080p expl√≠cito, mas h√° apenas um stream. Pegando (relativo): $mediaPlaylistRelativeUrl');
                  break;
                }
              }
            }
          }


          if (mediaPlaylistRelativeUrl != null) {
            Uri masterPlaylistUri = Uri.parse(m3u8Url!);
            Uri mediaPlaylistAbsoluteUri = _resolveUri(masterPlaylistUri, mediaPlaylistRelativeUrl);
            finalPlayableM3u8Url = mediaPlaylistAbsoluteUri.toString();
            print('‚úÖ URL absoluto do Media Playlist (selecionado): $finalPlayableM3u8Url');
          } else {
            print('‚ö†Ô∏è N√£o foi poss√≠vel encontrar um Media Playlist 1080p ou √∫nico dentro do Master Playlist. Usando o Master Playlist original.');
            finalPlayableM3u8Url = m3u8Url; // Mant√©m o master como fallback
          }
        } else {
          print('‚ÑπÔ∏è O M3U8 detectado n√£o √© um Master Playlist (provavelmente j√° √© o Media Playlist desejado: $finalPlayableM3u8Url).');
        }
      } else {
        print('‚ùå Falha ao baixar conte√∫do do M3U8 ($m3u8Url): ${response.statusCode}. Usando este URL como fallback.');
        finalPlayableM3u8Url = m3u8Url;
      }
    } catch (e) {
      print('‚ùå Erro ao processar o M3U8 ($m3u8Url): $e. Usando este URL como fallback.');
      finalPlayableM3u8Url = m3u8Url;
    }
  }

  await browser.close();

  if (finalPlayableM3u8Url != null) {
    print('‚úÖ Link final .m3u8 para reprodu√ß√£o: $finalPlayableM3u8Url');
    return {'m3u8Url': finalPlayableM3u8Url, 'currentUrl': currentUrl, 'm3u8FinalURL': finalPlayableM3u8Url};
  } else {
    print('‚ùå Arquivo .m3u8 n√£o encontrado ap√≥s todas as tentativas.');
    throw Exception('‚ùå Arquivo .m3u8 n√£o encontrado');
  }
}